<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>first on whiteKBlog</title>
    <link>https://sunnnner.github.io/tags/first/</link>
    <description>Recent content in first on whiteKBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Mar 2022 15:46:40 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/first/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pysocket</title>
      <link>https://sunnnner.github.io/pysocket/</link>
      <pubDate>Thu, 10 Mar 2022 15:46:40 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/pysocket/</guid>
      <description>2-1 套接字。面向连接的套接字和无连接套接字之间的区别是什么？
面向连接的套接字 无连接的套接字 在通信之前必须建立连接 在通信之前不需要建立连接 序列化的，可靠的不重复的数据交付 无法保证顺序性，可靠性或重复性，减少以一定的开销 没有记录边界 保存了记录边界 每条信息可以拆分成多个片段，并且每一个消息片段都能确保到达目的地，然后将他么按顺序组合在一起。 消息是以整体发送的。 传输控制协议(TCP) 用户数据协议(UDP) 2-2 客户端/服务器架构。用自己的话描述这个术语的意思，并给出几个例子。 1、服务器就是一系列硬件或软件，为一个或多个客户端（服务的用户）提供所需的“服务”。其存在的目的就是等待客户端的请求，并响应他们（提供服务），然后等待更多的请求。
2-3 套接字。 TCP 和 UDP 之中，哪种类型的服务器接受连接，并将它们转换到独立的 套接字进行客户端通信？ tcp
2-4 客户端。更新 TCP（tsTclnt.py）和 UDP（tsUclnt.py）客户端，以使得服务器名称 无须硬编码到应用程序中。此外，应该允许用户指定主机名和端口号，且如果二者 中任何一个或者全部参数丢失，那么应该使用默认值。
1 2 3 4 5 6 7 8 9 import sys, argparse if __name__ == &amp;#34;__main__&amp;#34;: parser = argparse.ArgumentParser(description=&amp;#34;pls write host port&amp;#34;) parser.add_argument(&amp;#34;--host&amp;#34;, type=str, default=&amp;#39;localhost&amp;#39;) parser.add_argument(&amp;#34;--port&amp;#34;, type=int, default=8000) args = parser.parse_args() host = args.host port = args.port print(args.host, args.port) 2-6 Daytime 服务。使用 socket.</description>
    </item>
    
    <item>
      <title>Pysocket</title>
      <link>https://sunnnner.github.io/p/pysocket/</link>
      <pubDate>Thu, 10 Mar 2022 15:46:40 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/pysocket/</guid>
      <description>2-1 套接字。面向连接的套接字和无连接套接字之间的区别是什么？
面向连接的套接字 无连接的套接字 在通信之前必须建立连接 在通信之前不需要建立连接 序列化的，可靠的不重复的数据交付 无法保证顺序性，可靠性或重复性，减少以一定的开销 没有记录边界 保存了记录边界 每条信息可以拆分成多个片段，并且每一个消息片段都能确保到达目的地，然后将他么按顺序组合在一起。 消息是以整体发送的。 传输控制协议(TCP) 用户数据协议(UDP) 2-2 客户端/服务器架构。用自己的话描述这个术语的意思，并给出几个例子。 1、服务器就是一系列硬件或软件，为一个或多个客户端（服务的用户）提供所需的“服务”。其存在的目的就是等待客户端的请求，并响应他们（提供服务），然后等待更多的请求。
2-3 套接字。 TCP 和 UDP 之中，哪种类型的服务器接受连接，并将它们转换到独立的 套接字进行客户端通信？ tcp
2-4 客户端。更新 TCP（tsTclnt.py）和 UDP（tsUclnt.py）客户端，以使得服务器名称 无须硬编码到应用程序中。此外，应该允许用户指定主机名和端口号，且如果二者 中任何一个或者全部参数丢失，那么应该使用默认值。
1 2 3 4 5 6 7 8 9 import sys, argparse if __name__ == &amp;#34;__main__&amp;#34;: parser = argparse.ArgumentParser(description=&amp;#34;pls write host port&amp;#34;) parser.add_argument(&amp;#34;--host&amp;#34;, type=str, default=&amp;#39;localhost&amp;#39;) parser.add_argument(&amp;#34;--port&amp;#34;, type=int, default=8000) args = parser.parse_args() host = args.host port = args.port print(args.host, args.port) 2-6 Daytime 服务。使用 socket.</description>
    </item>
    
    <item>
      <title>Djangoupgrade</title>
      <link>https://sunnnner.github.io/djangoupgrade/</link>
      <pubDate>Tue, 08 Mar 2022 11:06:40 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/djangoupgrade/</guid>
      <description> python3 中迭代器方法next()已经改变为__next__() </description>
    </item>
    
    <item>
      <title>Djangoupgrade</title>
      <link>https://sunnnner.github.io/p/djangoupgrade/</link>
      <pubDate>Tue, 08 Mar 2022 11:06:40 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/djangoupgrade/</guid>
      <description> python3 中迭代器方法next()已经改变为__next__() </description>
    </item>
    
    <item>
      <title>Go导入外部包失效问题</title>
      <link>https://sunnnner.github.io/go%E5%AF%BC%E5%85%A5%E5%A4%96%E9%83%A8%E5%8C%85%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 26 Aug 2021 10:48:36 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/go%E5%AF%BC%E5%85%A5%E5%A4%96%E9%83%A8%E5%8C%85%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description> 小记在mac上使用vscode导入redis包失效问题
解决办法
1 2 3 4 5 6 7 8 9 10 11 12 13 vim .bash_profile # 环境变量导入当前工作目录 export GOPATH=/Users/xxx/Desktop/go-project cd /Users/xxx/Desktop/go-project go mod init example.com/m/v2 # 自动下载所需的包 go mod tidy # 项目源代码放置处 mkdir src cd src # 可以开始编写了 </description>
    </item>
    
    <item>
      <title>Go导入外部包失效问题</title>
      <link>https://sunnnner.github.io/p/go%E5%AF%BC%E5%85%A5%E5%A4%96%E9%83%A8%E5%8C%85%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 26 Aug 2021 10:48:36 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/go%E5%AF%BC%E5%85%A5%E5%A4%96%E9%83%A8%E5%8C%85%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description> 小记在mac上使用vscode导入redis包失效问题
解决办法
1 2 3 4 5 6 7 8 9 10 11 12 13 vim .bash_profile # 环境变量导入当前工作目录 export GOPATH=/Users/xxx/Desktop/go-project cd /Users/xxx/Desktop/go-project go mod init example.com/m/v2 # 自动下载所需的包 go mod tidy # 项目源代码放置处 mkdir src cd src # 可以开始编写了 </description>
    </item>
    
    <item>
      <title>Django Admin Permissions控制</title>
      <link>https://sunnnner.github.io/django-admin-permissions%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 24 Aug 2021 09:26:52 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django-admin-permissions%E6%8E%A7%E5%88%B6/</guid>
      <description>is_staff bool 指定此用户是否可以访问管理站点 控制用户操作admin的权限由 django.contrib.auth.backends.ModelBackend 进行控制，它也进行控制用户的登录认证行为 ModelBackend源码解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class ModelBackend: &amp;#34;&amp;#34;&amp;#34; Authenticates against settings.</description>
    </item>
    
    <item>
      <title>Django Admin Permissions控制</title>
      <link>https://sunnnner.github.io/p/django-admin-permissions%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 24 Aug 2021 09:26:52 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django-admin-permissions%E6%8E%A7%E5%88%B6/</guid>
      <description>is_staff bool 指定此用户是否可以访问管理站点 控制用户操作admin的权限由 django.contrib.auth.backends.ModelBackend 进行控制，它也进行控制用户的登录认证行为 ModelBackend源码解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class ModelBackend: &amp;#34;&amp;#34;&amp;#34; Authenticates against settings.</description>
    </item>
    
    <item>
      <title>Go词法单元</title>
      <link>https://sunnnner.github.io/go%E8%AF%8D%E6%B3%95%E5%8D%95%E5%85%83/</link>
      <pubDate>Tue, 17 Aug 2021 10:10:49 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/go%E8%AF%8D%E6%B3%95%E5%8D%95%E5%85%83/</guid>
      <description>高级语言源程序内部的几个概念 token、关键字、标识符、操作符、分隔符和字面量 token token 是构成源程序的基本不可再分割的单元，编译器编译程序的第一步就是将源程序分割为一个个独立的token，这个过程就是词法分析
go语言的token可以分为关键字、标识符、操作符、分隔符和字面常量等</description>
    </item>
    
    <item>
      <title>Go词法单元</title>
      <link>https://sunnnner.github.io/p/go%E8%AF%8D%E6%B3%95%E5%8D%95%E5%85%83/</link>
      <pubDate>Tue, 17 Aug 2021 10:10:49 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/go%E8%AF%8D%E6%B3%95%E5%8D%95%E5%85%83/</guid>
      <description>高级语言源程序内部的几个概念 token、关键字、标识符、操作符、分隔符和字面量 token token 是构成源程序的基本不可再分割的单元，编译器编译程序的第一步就是将源程序分割为一个个独立的token，这个过程就是词法分析
go语言的token可以分为关键字、标识符、操作符、分隔符和字面常量等</description>
    </item>
    
    <item>
      <title>Django Orm聚合分组知识</title>
      <link>https://sunnnner.github.io/django-orm%E8%81%9A%E5%90%88%E5%88%86%E7%BB%84%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 12 Aug 2021 16:19:36 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django-orm%E8%81%9A%E5%90%88%E5%88%86%E7%BB%84%E7%9F%A5%E8%AF%86/</guid>
      <description> annotate 聚合操作 有 Max Sum Count一些参数使用 =相当于sql中的as 如果想要查询的时候更换变量名称使用extra(select={&amp;quot;change_file&amp;quot;: &amp;quot;model_file&amp;quot;}) 相当于 sql 中的as sql中order by分组在orm使用values进行表达 示例 1 2 3 # 按照各个省事进行聚合数量 DemoModel.objects.filter(test=xxx).extra(select={&amp;#39;position&amp;#39;: city}).\ values(&amp;#34;position&amp;#34;, &amp;#34;location&amp;#34;).annotate(count=Count(city)) </description>
    </item>
    
    <item>
      <title>Django Orm聚合分组知识</title>
      <link>https://sunnnner.github.io/p/django-orm%E8%81%9A%E5%90%88%E5%88%86%E7%BB%84%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 12 Aug 2021 16:19:36 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django-orm%E8%81%9A%E5%90%88%E5%88%86%E7%BB%84%E7%9F%A5%E8%AF%86/</guid>
      <description> annotate 聚合操作 有 Max Sum Count一些参数使用 =相当于sql中的as 如果想要查询的时候更换变量名称使用extra(select={&amp;quot;change_file&amp;quot;: &amp;quot;model_file&amp;quot;}) 相当于 sql 中的as sql中order by分组在orm使用values进行表达 示例 1 2 3 # 按照各个省事进行聚合数量 DemoModel.objects.filter(test=xxx).extra(select={&amp;#39;position&amp;#39;: city}).\ values(&amp;#34;position&amp;#34;, &amp;#34;location&amp;#34;).annotate(count=Count(city)) </description>
    </item>
    
    <item>
      <title>Ubuntu20.04 LTS编译python3.7</title>
      <link>https://sunnnner.github.io/ubuntu20.04-lts%E7%BC%96%E8%AF%91python3.7/</link>
      <pubDate>Fri, 06 Aug 2021 19:29:05 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/ubuntu20.04-lts%E7%BC%96%E8%AF%91python3.7/</guid>
      <description>ubuntu20.04 LTS编译 python3.7.1 安装编译前依赖包 sudo apt-get install -y build-essential libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev zlib1g-dev gcc make 编译前配置 sudo ./configure --enable-optimizations --prefix=/usr/local/bin/python3.7
&amp;ndash;prefix指定安装位置
编译安装 make
sudo make install
安装virtualenv虚拟环境来管理python版本 sudo apt install python3-pip pip install virtualenv pip install virtualenvwrapper mkdir .virtualenvs vim .zhsrc 1 2 3 4 export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=~/.local/bin/virtualenv source ~/.local/bin/virtualenvwrapper.sh source .zshrc 创建python3.7虚拟环境 mkvirtualenv -p mkvirtualenv -p /usr/local/bin/python3.7/bin/python3.7 py3.7 </description>
    </item>
    
    <item>
      <title>Ubuntu20.04 LTS编译python3.7</title>
      <link>https://sunnnner.github.io/p/ubuntu20.04-lts%E7%BC%96%E8%AF%91python3.7/</link>
      <pubDate>Fri, 06 Aug 2021 19:29:05 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/ubuntu20.04-lts%E7%BC%96%E8%AF%91python3.7/</guid>
      <description>ubuntu20.04 LTS编译 python3.7.1 安装编译前依赖包 sudo apt-get install -y build-essential libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev zlib1g-dev gcc make 编译前配置 sudo ./configure --enable-optimizations --prefix=/usr/local/bin/python3.7
&amp;ndash;prefix指定安装位置
编译安装 make
sudo make install
安装virtualenv虚拟环境来管理python版本 sudo apt install python3-pip pip install virtualenv pip install virtualenvwrapper mkdir .virtualenvs vim .zhsrc 1 2 3 4 export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=~/.local/bin/virtualenv source ~/.local/bin/virtualenvwrapper.sh source .zshrc 创建python3.7虚拟环境 mkvirtualenv -p mkvirtualenv -p /usr/local/bin/python3.7/bin/python3.7 py3.7 </description>
    </item>
    
    <item>
      <title>K8s Install</title>
      <link>https://sunnnner.github.io/k8s-install/</link>
      <pubDate>Tue, 08 Oct 2019 14:57:24 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/k8s-install/</guid>
      <description></description>
    </item>
    
    <item>
      <title>K8s Install</title>
      <link>https://sunnnner.github.io/p/k8s-install/</link>
      <pubDate>Tue, 08 Oct 2019 14:57:24 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/k8s-install/</guid>
      <description></description>
    </item>
    
    <item>
      <title>缺少的知识</title>
      <link>https://sunnnner.github.io/%E7%BC%BA%E5%B0%91%E7%9A%84%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sat, 01 Sep 2018 10:28:49 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/%E7%BC%BA%E5%B0%91%E7%9A%84%E7%9F%A5%E8%AF%86/</guid>
      <description> ISCSI相关操作 熟悉MVC，熟悉OOP，熟悉Python之外的其他OOP语言，Java者优先 rust go vue </description>
    </item>
    
    <item>
      <title>缺少的知识</title>
      <link>https://sunnnner.github.io/p/%E7%BC%BA%E5%B0%91%E7%9A%84%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sat, 01 Sep 2018 10:28:49 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/%E7%BC%BA%E5%B0%91%E7%9A%84%E7%9F%A5%E8%AF%86/</guid>
      <description> ISCSI相关操作 熟悉MVC，熟悉OOP，熟悉Python之外的其他OOP语言，Java者优先 rust go vue </description>
    </item>
    
    <item>
      <title>Python基础</title>
      <link>https://sunnnner.github.io/python%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 03 Jun 2018 10:22:36 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/python%E5%9F%BA%E7%A1%80/</guid>
      <description>让python2支持中文 1 2 #coding=utf-8 #-*-coding:utf-8-*- 在页面头部写入 变量及数据类型 变量就是用来存东西的 程序就是用来处理数据的，而变量就是用来存储数据的 变量起名要有意义 数据类型 1 2 3 4 5 6 7 nnumber数字包括int long float complex(复数) bollernfalse true String list列表（数组） tuple元组 dictionary字典（对象） 可以用type()来查看变量数据类型 关键字 交换模式下使用import keyword- keyword.kwlist查看当前系统python的关键字 python2中使用raw_iput进行获取用户键盘数据它会把任何数据当作字符串来对待 python3中使用input来捕获用户键盘数据但是在python2中input输入的内容必须是表达式 输出 print 格式化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 %c代表字符 %s 通过str（）字符串转换来格式化 %i 有符号十进制整数 %d 有符号十进制整数 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写字母） %X 十六进制整数（大写字母） %e 索引符号（小写e） %E 索引符号（大写E） %f 浮点实数 %g %f与%e 的简写 %G %F%E的简写 \n 换行输出 python算术运算符 +-*/ //（取整除） %求余 ** 幂 赋值运算 1 2 3 4 5 6 7 += -= *= /= %= **= 幂赋值运算符 //= 取整除赋值运算符 ==- while循环== 1 2 3 4 5 6 7 8 complex（）创建一个复数 eval（）运算python中有效表达式并返回一个对象 tuple（）将序列s转换为一个元组 list（）转换为列表 unichr()转换为Unicode字符 ord（）转换为它的整数值 hex() 将一个整数转换为一个十六进制的字符串 oct()将一个整数转换为一个八进制字符串 </description>
    </item>
    
    <item>
      <title>Python基础</title>
      <link>https://sunnnner.github.io/p/python%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 03 Jun 2018 10:22:36 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/python%E5%9F%BA%E7%A1%80/</guid>
      <description>让python2支持中文 1 2 #coding=utf-8 #-*-coding:utf-8-*- 在页面头部写入 变量及数据类型 变量就是用来存东西的 程序就是用来处理数据的，而变量就是用来存储数据的 变量起名要有意义 数据类型 1 2 3 4 5 6 7 nnumber数字包括int long float complex(复数) bollernfalse true String list列表（数组） tuple元组 dictionary字典（对象） 可以用type()来查看变量数据类型 关键字 交换模式下使用import keyword- keyword.kwlist查看当前系统python的关键字 python2中使用raw_iput进行获取用户键盘数据它会把任何数据当作字符串来对待 python3中使用input来捕获用户键盘数据但是在python2中input输入的内容必须是表达式 输出 print 格式化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 %c代表字符 %s 通过str（）字符串转换来格式化 %i 有符号十进制整数 %d 有符号十进制整数 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写字母） %X 十六进制整数（大写字母） %e 索引符号（小写e） %E 索引符号（大写E） %f 浮点实数 %g %f与%e 的简写 %G %F%E的简写 \n 换行输出 python算术运算符 +-*/ //（取整除） %求余 ** 幂 赋值运算 1 2 3 4 5 6 7 += -= *= /= %= **= 幂赋值运算符 //= 取整除赋值运算符 ==- while循环== 1 2 3 4 5 6 7 8 complex（）创建一个复数 eval（）运算python中有效表达式并返回一个对象 tuple（）将序列s转换为一个元组 list（）转换为列表 unichr()转换为Unicode字符 ord（）转换为它的整数值 hex() 将一个整数转换为一个十六进制的字符串 oct()将一个整数转换为一个八进制字符串 </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on whiteKBlog</title>
    <link>https://sunnnner.github.io/tags/docker/</link>
    <description>Recent content in docker on whiteKBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 15:35:30 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker添加root权限省去sudo</title>
      <link>https://sunnnner.github.io/docker%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90%E7%9C%81%E5%8E%BBsudo/</link>
      <pubDate>Fri, 01 Nov 2019 15:35:30 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/docker%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90%E7%9C%81%E5%8E%BBsudo/</guid>
      <description>首先使用root权限账户登录系统 首先查看用户组中有没有docker组sudo cat /etc/group | grep docker 创建docker分组，并将相应的用户添加到这个分组里面
sudo groupadd -g 999 docker
-g 999为组ID 也可以不指定
sudo usermod -aG dockerroot username
sudo usermod -aG docker username
检查一下是否有效 cat /etc/group
用户退出登录或者重启docker-daemon使权限生效
sudo systemctl restart docker
运行docker info查看是否生效
如果提示get权限不足，修改/var/run/docker.sock权限即可
sudo chmod a+rw /var/run/docker.sock</description>
    </item>
    
    <item>
      <title>Docker添加root权限省去sudo</title>
      <link>https://sunnnner.github.io/p/docker%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90%E7%9C%81%E5%8E%BBsudo/</link>
      <pubDate>Fri, 01 Nov 2019 15:35:30 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/docker%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90%E7%9C%81%E5%8E%BBsudo/</guid>
      <description>首先使用root权限账户登录系统 首先查看用户组中有没有docker组sudo cat /etc/group | grep docker 创建docker分组，并将相应的用户添加到这个分组里面
sudo groupadd -g 999 docker
-g 999为组ID 也可以不指定
sudo usermod -aG dockerroot username
sudo usermod -aG docker username
检查一下是否有效 cat /etc/group
用户退出登录或者重启docker-daemon使权限生效
sudo systemctl restart docker
运行docker info查看是否生效
如果提示get权限不足，修改/var/run/docker.sock权限即可
sudo chmod a+rw /var/run/docker.sock</description>
    </item>
    
    <item>
      <title>Docker操作</title>
      <link>https://sunnnner.github.io/docker%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 08 Oct 2019 14:19:00 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/docker%E6%93%8D%E4%BD%9C/</guid>
      <description>docker build 打包docker 项目
docker-compose up 启动整体项目(docker-compose.yml文件)
docker-compose down 强制停止docker运行的所有项目
1、删除所有容器 docker rm docker ps -a -q
2、删除所有镜像d ocker rmi docker images -q
3、按条件删除镜像 没有打标签docker rmi docker images -q | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39;
镜像名包含关键字docker rmi &amp;ndash;force docker images | grep doss-api | awk &#39;{print $3}&#39; //其中doss-api为关键字
docker-compose.yml
service 项目
image docker镜像名字，若本地没有会尝试在docker服务器拉取
restart 是否stop后重启
command 启动路径
volumes 将docker容器文件夹与本地文件夹映射挂载 [本地:docker文件夹]
environment 运行携带的参数
ports运行端口
links 关联项目，关联之后内部访问</description>
    </item>
    
    <item>
      <title>Docker操作</title>
      <link>https://sunnnner.github.io/p/docker%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 08 Oct 2019 14:19:00 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/docker%E6%93%8D%E4%BD%9C/</guid>
      <description>docker build 打包docker 项目
docker-compose up 启动整体项目(docker-compose.yml文件)
docker-compose down 强制停止docker运行的所有项目
1、删除所有容器 docker rm docker ps -a -q
2、删除所有镜像d ocker rmi docker images -q
3、按条件删除镜像 没有打标签docker rmi docker images -q | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39;
镜像名包含关键字docker rmi &amp;ndash;force docker images | grep doss-api | awk &#39;{print $3}&#39; //其中doss-api为关键字
docker-compose.yml
service 项目
image docker镜像名字，若本地没有会尝试在docker服务器拉取
restart 是否stop后重启
command 启动路径
volumes 将docker容器文件夹与本地文件夹映射挂载 [本地:docker文件夹]
environment 运行携带的参数
ports运行端口
links 关联项目，关联之后内部访问</description>
    </item>
    
  </channel>
</rss>

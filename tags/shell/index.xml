<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on whiteKBlog</title>
    <link>https://sunnnner.github.io/tags/shell/</link>
    <description>Recent content in shell on whiteKBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jan 2020 15:45:01 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell 判断文件中是否存在字符串</title>
      <link>https://sunnnner.github.io/shell-%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 01 Jan 2020 15:45:01 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 if cat xxx.yml | grep &amp;#34;content&amp;#34;&amp;gt;/dev/null then return 1 else return 0 fi </description>
    </item>
    
    <item>
      <title>Shell 判断文件中是否存在字符串</title>
      <link>https://sunnnner.github.io/p/shell-%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 01 Jan 2020 15:45:01 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 if cat xxx.yml | grep &amp;#34;content&amp;#34;&amp;gt;/dev/null then return 1 else return 0 fi </description>
    </item>
    
    <item>
      <title>Shell 文件测试操作</title>
      <link>https://sunnnner.github.io/shell-%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 20 Aug 2019 11:22:13 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%93%8D%E4%BD%9C/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #! /bin/bash # file test operators # 检查文件是否存在 -e 表示empty 默认文件是不为空 echo -e &amp;#34;Enter the name of file: ~&amp;#34; read filename # 注意括号内空格 -e 就是exist的意思,表示文件是否存在 if [ -e $filename ] then echo &amp;#39;File found&amp;#39; else echo &amp;#39;file is not exist or not found&amp;#39; fi # 检查是否是常规文件或者目录 -f表示file 判断是否是常规的文件 if [ -f $filename ] then echo &amp;#34;$filename found&amp;#34; else echo &amp;#34;$filename is not exist or not fount&amp;#34; fi # 检查文件是否是空 if [ -s $filename ] then echo &amp;#34;$filename is not empty&amp;#34; else echo &amp;#34;$filename is empty&amp;#34; fi </description>
    </item>
    
    <item>
      <title>Shell 文件测试操作</title>
      <link>https://sunnnner.github.io/p/shell-%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 20 Aug 2019 11:22:13 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%93%8D%E4%BD%9C/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #! /bin/bash # file test operators # 检查文件是否存在 -e 表示empty 默认文件是不为空 echo -e &amp;#34;Enter the name of file: ~&amp;#34; read filename # 注意括号内空格 -e 就是exist的意思,表示文件是否存在 if [ -e $filename ] then echo &amp;#39;File found&amp;#39; else echo &amp;#39;file is not exist or not found&amp;#39; fi # 检查是否是常规文件或者目录 -f表示file 判断是否是常规的文件 if [ -f $filename ] then echo &amp;#34;$filename found&amp;#34; else echo &amp;#34;$filename is not exist or not fount&amp;#34; fi # 检查文件是否是空 if [ -s $filename ] then echo &amp;#34;$filename is not empty&amp;#34; else echo &amp;#34;$filename is empty&amp;#34; fi </description>
    </item>
    
    <item>
      <title>Shell if Then语句</title>
      <link>https://sunnnner.github.io/shell-if-then%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 19 Aug 2019 11:21:38 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-if-then%E8%AF%AD%E5%8F%A5/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 !</description>
    </item>
    
    <item>
      <title>Shell if Then语句</title>
      <link>https://sunnnner.github.io/p/shell-if-then%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 19 Aug 2019 11:21:38 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-if-then%E8%AF%AD%E5%8F%A5/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 !</description>
    </item>
    
    <item>
      <title>Shell 如何传参</title>
      <link>https://sunnnner.github.io/shell-%E5%A6%82%E4%BD%95%E4%BC%A0%E5%8F%82/</link>
      <pubDate>Sun, 18 Aug 2019 11:21:09 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-%E5%A6%82%E4%BD%95%E4%BC%A0%E5%8F%82/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # how to pass arguments to shell script # 利用echo打印你传入的参数 # 上面可以看到$0表示 我们运行sh文件的语句 ./demo.sh，这个不是一个我们提供的真实的参数。 # echo $0 $1 $2 $3 # 换成args 数组方式去存储参数列表 args=(&amp;#34;$@&amp;#34;) # echo ${args[0]} ${args[1]} ${args[2]} ${args[3]} # 更简单的方法 $@可以表示传入的参数列表，直接打印出来 # echo $@ # 如何计算参数的个数 # $#可以存储参数的个数值 echo $# </description>
    </item>
    
    <item>
      <title>Shell 如何传参</title>
      <link>https://sunnnner.github.io/p/shell-%E5%A6%82%E4%BD%95%E4%BC%A0%E5%8F%82/</link>
      <pubDate>Sun, 18 Aug 2019 11:21:09 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-%E5%A6%82%E4%BD%95%E4%BC%A0%E5%8F%82/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # how to pass arguments to shell script # 利用echo打印你传入的参数 # 上面可以看到$0表示 我们运行sh文件的语句 ./demo.sh，这个不是一个我们提供的真实的参数。 # echo $0 $1 $2 $3 # 换成args 数组方式去存储参数列表 args=(&amp;#34;$@&amp;#34;) # echo ${args[0]} ${args[1]} ${args[2]} ${args[3]} # 更简单的方法 $@可以表示传入的参数列表，直接打印出来 # echo $@ # 如何计算参数的个数 # $#可以存储参数的个数值 echo $# </description>
    </item>
    
    <item>
      <title>Shell 获取用户输入</title>
      <link>https://sunnnner.github.io/shell-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</link>
      <pubDate>Sat, 17 Aug 2019 11:20:41 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #! /bin/bash # learn about how to read from user input echo &amp;#34;Places input your name&amp;#34; read name echo &amp;#34;your had input name is $name&amp;#34; # -p 是promote ，提示的意思就是可以让用户在提示语相同 # 一行输入内容 read -p &amp;#34;Please input a name&amp;#34; user_var echo &amp;#34;your had input name is: $user_var&amp;#34; # 模拟用户输入密码操作 read -p &amp;#34;place input you name&amp;#34; users_var # -s一般在输入密码的时候启用可以输入过程看不到操作 read -sp &amp;#34;place input you password&amp;#34; pas_var echo &amp;#34;you had input name is $users_var&amp;#34; echo &amp;#34;you had input password is $pas_var&amp;#34; </description>
    </item>
    
    <item>
      <title>Shell 获取用户输入</title>
      <link>https://sunnnner.github.io/p/shell-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</link>
      <pubDate>Sat, 17 Aug 2019 11:20:41 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</guid>
      <description> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #! /bin/bash # learn about how to read from user input echo &amp;#34;Places input your name&amp;#34; read name echo &amp;#34;your had input name is $name&amp;#34; # -p 是promote ，提示的意思就是可以让用户在提示语相同 # 一行输入内容 read -p &amp;#34;Please input a name&amp;#34; user_var echo &amp;#34;your had input name is: $user_var&amp;#34; # 模拟用户输入密码操作 read -p &amp;#34;place input you name&amp;#34; users_var # -s一般在输入密码的时候启用可以输入过程看不到操作 read -sp &amp;#34;place input you password&amp;#34; pas_var echo &amp;#34;you had input name is $users_var&amp;#34; echo &amp;#34;you had input password is $pas_var&amp;#34; </description>
    </item>
    
    <item>
      <title>Shell 2</title>
      <link>https://sunnnner.github.io/shell-2/</link>
      <pubDate>Fri, 16 Aug 2019 11:19:55 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-2/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 #! /bin/bash # input your comments here echo &amp;#39;Hello world&amp;#39; # you also can input a comment here echo $BASH # 引用系统变量使用“$” echo $PATH echo the system variable path is $PATH name=Anthony echo my name is $name 引用系统变量使用‘$’
定义变量时等号两边不要有空格
#号是备注信息</description>
    </item>
    
    <item>
      <title>Shell 2</title>
      <link>https://sunnnner.github.io/p/shell-2/</link>
      <pubDate>Fri, 16 Aug 2019 11:19:55 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-2/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 #! /bin/bash # input your comments here echo &amp;#39;Hello world&amp;#39; # you also can input a comment here echo $BASH # 引用系统变量使用“$” echo $PATH echo the system variable path is $PATH name=Anthony echo my name is $name 引用系统变量使用‘$’
定义变量时等号两边不要有空格
#号是备注信息</description>
    </item>
    
    <item>
      <title>Shell 1</title>
      <link>https://sunnnner.github.io/shell-1/</link>
      <pubDate>Thu, 15 Aug 2019 11:18:47 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/shell-1/</guid>
      <description>什么是shell
最早期运行在unix上的shell是Bourne shell（sh），其实shell我们都知道是一个内核，里面集成了很多命令，shell负责和底层硬件打交道。前面我们介绍的这些命令，可以说是shell命令。shell程序的入口一般是在终端输入一些相关命令，然后不需要编译，直接去解释和运行命令的结果，给出相关反馈到终端上面。所以，一句话来理解，shell是一个很多命令的集合，一个内核 什么是bash
bash 是一个为GNU计划编写的Unix shell。它的名字是一系列缩写：Bourne-Again SHell — 这是关于Bourne shell（sh）的一个双关语（Bourne again / born again）.Bash (GNU Bourne-Again Shell) 是许多Linux发行版的默认Shell。事实上，还有许多传统UNIX上用的Shell，例如tcsh、csh、ash、bsh、ksh等等，Shell Script大致都类同，当您学会一种Shell以后，其它的Shell会很快就上手，大多数的时候，一个Shell Script通常可以在很多种Shell上使用。所以，这就是我们为什么要使用bash脚本的原因。我们接下来的shell脚本都是基于bash。 什么是shell脚本
前面我们写过了一个shell脚本，shell脚本就是通过一些相关shell命令的组合来达到完成一个任务的文件，文件一般是以,sh结尾。 写一个shell脚本，在终端打印hello shell
1 2 3 4 5 6 7 8 touch hello.sh code hello.sh #! /bin/bash echo &amp;#39;Hello world&amp;#39; 提高权限 -rwxr-xr-x chmod +x hellp.sh </description>
    </item>
    
    <item>
      <title>Shell 1</title>
      <link>https://sunnnner.github.io/p/shell-1/</link>
      <pubDate>Thu, 15 Aug 2019 11:18:47 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/shell-1/</guid>
      <description>什么是shell
最早期运行在unix上的shell是Bourne shell（sh），其实shell我们都知道是一个内核，里面集成了很多命令，shell负责和底层硬件打交道。前面我们介绍的这些命令，可以说是shell命令。shell程序的入口一般是在终端输入一些相关命令，然后不需要编译，直接去解释和运行命令的结果，给出相关反馈到终端上面。所以，一句话来理解，shell是一个很多命令的集合，一个内核 什么是bash
bash 是一个为GNU计划编写的Unix shell。它的名字是一系列缩写：Bourne-Again SHell — 这是关于Bourne shell（sh）的一个双关语（Bourne again / born again）.Bash (GNU Bourne-Again Shell) 是许多Linux发行版的默认Shell。事实上，还有许多传统UNIX上用的Shell，例如tcsh、csh、ash、bsh、ksh等等，Shell Script大致都类同，当您学会一种Shell以后，其它的Shell会很快就上手，大多数的时候，一个Shell Script通常可以在很多种Shell上使用。所以，这就是我们为什么要使用bash脚本的原因。我们接下来的shell脚本都是基于bash。 什么是shell脚本
前面我们写过了一个shell脚本，shell脚本就是通过一些相关shell命令的组合来达到完成一个任务的文件，文件一般是以,sh结尾。 写一个shell脚本，在终端打印hello shell
1 2 3 4 5 6 7 8 touch hello.sh code hello.sh #! /bin/bash echo &amp;#39;Hello world&amp;#39; 提高权限 -rwxr-xr-x chmod +x hellp.sh </description>
    </item>
    
  </channel>
</rss>

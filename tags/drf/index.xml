<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>drf on whiteKBlog</title>
    <link>https://sunnnner.github.io/tags/drf/</link>
    <description>Recent content in drf on whiteKBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Sep 2019 11:43:08 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/drf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RESTful_API设计指南</title>
      <link>https://sunnnner.github.io/restful_api%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 12 Sep 2019 11:43:08 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/restful_api%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</guid>
      <description>网络应用程序，分为前端和后端两个部分， 当前的发展趋势， 就是前段设备层出不穷 因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信， 这导致API架构的流行， &amp;gt; 甚至出现APIfirst的设计思想。
协议 API与用户的通信协议， 总是使用HTTPs协议 域名 应尽量将API部署在专用域名之下
https:// api.example.com 如果确定API很简单，不会有进一步扩展， 可以考虑放在主域名下
https: // example.com 版本(Versioning) 应将API的版本号放入URL
https://api.example.com/v1/ 另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。
路径(Endpoint) 路径又称”终点”（endpoint），表示API的具体网址。 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。 举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。 · https://api.example.com/v1/zoos · https://api.example.com/v1/animals · https://api.example.com/v1/employees HTTP动词 对于资源的具体操作类型，由HTTP动词表示。 常用的HTTP动词有下面五个（括号里是对应的SQL命令）。 GET(SELECT) : 从服务器取出资源(一项或者多项) POST(CREATE) : 在服务器新建一个资源 PUT(UPDATE) : 在服务器更新资源（客户端提供改变后的完整资源） PATCH(update): 在服务器更新资源（客户端提供改变的属性） DELETE(DELETE): 从服务器删除资源 还有两个不常用的HTTP动词 HEAD: 获取资源的元数据 OPTIONS: 获 取信息， 关于资源的哪些属性是客户端可以改变的 下面是一些例子 GET/ courses ：列出所有课程 POST/ courses : 添加一门课程 GET/ courses/ID: 获取某个课程的信息 PUT/ courses/ID: 更新某个指定课程信息（提供该课程的全部信息） PATCH/ courses/ID: 更新某个指定课程信息（提供该课程的部分信息） DELETE/courses/ID: 删除一门课程 GET/ courses/ ID/ class: 列出某个指定课程的所有班级 DELETE/courses/ class/ID: 删除某个指定课程的指定班级 过滤信息（Fitering） 如果记录数量很多，服务器不可能都将他们返回给用户，API应该提供参数， 过滤返回结果，下面是一些常见的参数 ?</description>
    </item>
    
    <item>
      <title>RESTful_API设计指南</title>
      <link>https://sunnnner.github.io/p/restful_api%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 12 Sep 2019 11:43:08 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/restful_api%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</guid>
      <description>网络应用程序，分为前端和后端两个部分， 当前的发展趋势， 就是前段设备层出不穷 因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信， 这导致API架构的流行， &amp;gt; 甚至出现APIfirst的设计思想。
协议 API与用户的通信协议， 总是使用HTTPs协议 域名 应尽量将API部署在专用域名之下
https:// api.example.com 如果确定API很简单，不会有进一步扩展， 可以考虑放在主域名下
https: // example.com 版本(Versioning) 应将API的版本号放入URL
https://api.example.com/v1/ 另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。
路径(Endpoint) 路径又称”终点”（endpoint），表示API的具体网址。 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。 举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。 · https://api.example.com/v1/zoos · https://api.example.com/v1/animals · https://api.example.com/v1/employees HTTP动词 对于资源的具体操作类型，由HTTP动词表示。 常用的HTTP动词有下面五个（括号里是对应的SQL命令）。 GET(SELECT) : 从服务器取出资源(一项或者多项) POST(CREATE) : 在服务器新建一个资源 PUT(UPDATE) : 在服务器更新资源（客户端提供改变后的完整资源） PATCH(update): 在服务器更新资源（客户端提供改变的属性） DELETE(DELETE): 从服务器删除资源 还有两个不常用的HTTP动词 HEAD: 获取资源的元数据 OPTIONS: 获 取信息， 关于资源的哪些属性是客户端可以改变的 下面是一些例子 GET/ courses ：列出所有课程 POST/ courses : 添加一门课程 GET/ courses/ID: 获取某个课程的信息 PUT/ courses/ID: 更新某个指定课程信息（提供该课程的全部信息） PATCH/ courses/ID: 更新某个指定课程信息（提供该课程的部分信息） DELETE/courses/ID: 删除一门课程 GET/ courses/ ID/ class: 列出某个指定课程的所有班级 DELETE/courses/ class/ID: 删除某个指定课程的指定班级 过滤信息（Fitering） 如果记录数量很多，服务器不可能都将他们返回给用户，API应该提供参数， 过滤返回结果，下面是一些常见的参数 ?</description>
    </item>
    
    <item>
      <title>Django_rest_framework</title>
      <link>https://sunnnner.github.io/django_rest_framework/</link>
      <pubDate>Sun, 08 Sep 2019 11:37:47 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django_rest_framework/</guid>
      <description>为什么要使用Django_rest_framework 能自动生成restful规范的API
代码简介 并且开发速度快 Django_rest_framework框架有什么组件 序列化组件：serializers 对queryset序列化及对请求数据格式校验
路由组件：routers 进行路由开发 视图组件： ModelViewSet 帮助开发者提供了一些类。 并在类中提供了多个方法 认证组件： 写一个类并注册到选线类（authentication_classes）， 再类的authticate方法中编写认证逻辑 权限组件：写一个类并注册到权限类（permission_classes）, 在类中的has_permission方法中编写认证逻辑 频率限制： 写一个类并注册到频率类（throttle_classes）, 在类中的allow_request/wait方法中编写认证逻辑 解析器 选择对数据解析的类， 在解析类中注册(parser_classes) 渲染器 定义数据如何渲染到页面上， 在渲染器类中注册(render_classes) 分页 对获取到的数据进行分页处理 pagination_class 版本 版本控制用来在不同的客户端使用不同的行为 在URL中设置version参数， 用户请求时候传入参数， 在request.version中获取版本, 根据版本不同，做不同处理 django rest framework框架的认证流程 用户请求走进来进入APIView， 初始化了默认的认证方式
进入APIView.dispatch()方法， initial方法调用了request.user 如果我们配置了认证类， 走我们自己认证类中的authentication方法 django rest framework如何实现的用户访问频率控制 使用ip/用户账户作为建， 每次访问时间作为值， 构造一个字典数据， 存起来， 每次访问对时间列表进行判断
把没有访问的超时的删掉。 在计算列表剩余的元素就能做到频率限制了 匿名账户， 使用IP控制， 但是无法完全控制， 因为用户可以更换代理IP 登陆用户使用账号控制，但是如果有很多账号，也无法限制 如何实现用户登陆认证 cookice session
token 登陆成功后生成的加密字符串 JWT： json wed token 缩写， 他讲用户信息加密到token中 服务器不保存任何用户信息， 服务器通过使用保存的密匙来验证token的正确性 rest_framework序列化组件的作用,以及一些外键关系的钩子方法</description>
    </item>
    
    <item>
      <title>Django_rest_framework</title>
      <link>https://sunnnner.github.io/p/django_rest_framework/</link>
      <pubDate>Sun, 08 Sep 2019 11:37:47 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django_rest_framework/</guid>
      <description>为什么要使用Django_rest_framework 能自动生成restful规范的API
代码简介 并且开发速度快 Django_rest_framework框架有什么组件 序列化组件：serializers 对queryset序列化及对请求数据格式校验
路由组件：routers 进行路由开发 视图组件： ModelViewSet 帮助开发者提供了一些类。 并在类中提供了多个方法 认证组件： 写一个类并注册到选线类（authentication_classes）， 再类的authticate方法中编写认证逻辑 权限组件：写一个类并注册到权限类（permission_classes）, 在类中的has_permission方法中编写认证逻辑 频率限制： 写一个类并注册到频率类（throttle_classes）, 在类中的allow_request/wait方法中编写认证逻辑 解析器 选择对数据解析的类， 在解析类中注册(parser_classes) 渲染器 定义数据如何渲染到页面上， 在渲染器类中注册(render_classes) 分页 对获取到的数据进行分页处理 pagination_class 版本 版本控制用来在不同的客户端使用不同的行为 在URL中设置version参数， 用户请求时候传入参数， 在request.version中获取版本, 根据版本不同，做不同处理 django rest framework框架的认证流程 用户请求走进来进入APIView， 初始化了默认的认证方式
进入APIView.dispatch()方法， initial方法调用了request.user 如果我们配置了认证类， 走我们自己认证类中的authentication方法 django rest framework如何实现的用户访问频率控制 使用ip/用户账户作为建， 每次访问时间作为值， 构造一个字典数据， 存起来， 每次访问对时间列表进行判断
把没有访问的超时的删掉。 在计算列表剩余的元素就能做到频率限制了 匿名账户， 使用IP控制， 但是无法完全控制， 因为用户可以更换代理IP 登陆用户使用账号控制，但是如果有很多账号，也无法限制 如何实现用户登陆认证 cookice session
token 登陆成功后生成的加密字符串 JWT： json wed token 缩写， 他讲用户信息加密到token中 服务器不保存任何用户信息， 服务器通过使用保存的密匙来验证token的正确性 rest_framework序列化组件的作用,以及一些外键关系的钩子方法</description>
    </item>
    
  </channel>
</rss>

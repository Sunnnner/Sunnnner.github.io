<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on whiteKBlog</title>
    <link>https://sunnnner.github.io/tags/django/</link>
    <description>Recent content in django on whiteKBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 15:28:02 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django文件压缩</title>
      <link>https://sunnnner.github.io/django%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Fri, 11 Oct 2019 15:28:02 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</guid>
      <description>类型和方法数据压缩分为两种类型。
有损：在这种类型的压缩中，压缩时会降低数据质量（在这种情况下为图像和视频）。这被广泛用于压缩多媒体。
无损：在这种类型的压缩中，数据质量（在这种情况下为图像）不会丢失。它广泛用于压缩无法承受数据丢失的敏感数据。
安装与配置
安装python图像处理库 Pillow
`pip install Pillow``
我们将建立一个简单的项目来演示图像上传以及上传之前和之后的文件大小。您也可以参考Django-docs或在此处下载完整的源代码。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 models.py from pil import Image from io import BytesIO from django.core.files.uploadedfile import InMemoryUploadedFile class File(models.Model): user = models.ForeignKey(KwsUser, verbose_name=&amp;#39;所属用户&amp;#39;, help_text=&amp;#39;所属用户&amp;#39;) file = models.FileField(upload_to=get_file_path, help_text=&amp;#39;上传的文件&amp;#39;) big_file = models.FileField(upload_to=get_pro_file_path, help_text=&amp;#39;上传的原图&amp;#39;, null=True, blank=True) upload_time = models.</description>
    </item>
    
    <item>
      <title>Django文件压缩</title>
      <link>https://sunnnner.github.io/p/django%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Fri, 11 Oct 2019 15:28:02 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</guid>
      <description>类型和方法数据压缩分为两种类型。
有损：在这种类型的压缩中，压缩时会降低数据质量（在这种情况下为图像和视频）。这被广泛用于压缩多媒体。
无损：在这种类型的压缩中，数据质量（在这种情况下为图像）不会丢失。它广泛用于压缩无法承受数据丢失的敏感数据。
安装与配置
安装python图像处理库 Pillow
`pip install Pillow``
我们将建立一个简单的项目来演示图像上传以及上传之前和之后的文件大小。您也可以参考Django-docs或在此处下载完整的源代码。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 models.py from pil import Image from io import BytesIO from django.core.files.uploadedfile import InMemoryUploadedFile class File(models.Model): user = models.ForeignKey(KwsUser, verbose_name=&amp;#39;所属用户&amp;#39;, help_text=&amp;#39;所属用户&amp;#39;) file = models.FileField(upload_to=get_file_path, help_text=&amp;#39;上传的文件&amp;#39;) big_file = models.FileField(upload_to=get_pro_file_path, help_text=&amp;#39;上传的原图&amp;#39;, null=True, blank=True) upload_time = models.</description>
    </item>
    
    <item>
      <title>静态文件的含义以及配置</title>
      <link>https://sunnnner.github.io/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%AB%E4%B9%89%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 10 Oct 2019 15:27:14 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%AB%E4%B9%89%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</guid>
      <description>Django staticfile 的配置 起初以为是我dockerfile写错了的问题，的确不是dockerfile的问题是我没有理解static_url与static_root的含义
👍 如果不是前后端分离项目在每个APP下都应该有static与templates文件夹存在不然django收集静态文件收集不到
STATIC_URL为Django返回给前端的路径即项目内部的static文件夹
STATIC_ROOT为静态文件收集的路径即 python3 manage.py collectstatic 的文件夹
STATIC_ROOT = os.path.join(BASE_DIR, &amp;lsquo;static&amp;rsquo;) 意思是把文件收集到项目下static文件夹下的static文件夹中
所以方便起见我把 STATIC_ROOT = os.path.join(BASE_DIR, &amp;lsquo;&amp;rsquo;)设置为了收集在项目下static文件夹下
大坑不少小坑不断，学无止境啊</description>
    </item>
    
    <item>
      <title>静态文件的含义以及配置</title>
      <link>https://sunnnner.github.io/p/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%AB%E4%B9%89%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 10 Oct 2019 15:27:14 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%AB%E4%B9%89%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</guid>
      <description>Django staticfile 的配置 起初以为是我dockerfile写错了的问题，的确不是dockerfile的问题是我没有理解static_url与static_root的含义
👍 如果不是前后端分离项目在每个APP下都应该有static与templates文件夹存在不然django收集静态文件收集不到
STATIC_URL为Django返回给前端的路径即项目内部的static文件夹
STATIC_ROOT为静态文件收集的路径即 python3 manage.py collectstatic 的文件夹
STATIC_ROOT = os.path.join(BASE_DIR, &amp;lsquo;static&amp;rsquo;) 意思是把文件收集到项目下static文件夹下的static文件夹中
所以方便起见我把 STATIC_ROOT = os.path.join(BASE_DIR, &amp;lsquo;&amp;rsquo;)设置为了收集在项目下static文件夹下
大坑不少小坑不断，学无止境啊</description>
    </item>
    
    <item>
      <title>Django Minio开发过程</title>
      <link>https://sunnnner.github.io/django-minio%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sun, 06 Oct 2019 14:17:12 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django-minio%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</guid>
      <description> 使用Django-minio-storage进行开发minio的静态文件存储功能，本来寻思用minio直接进行开发，既然django有这个包我们就拿来用一下
项目说明django-minio-storage 开发期间遇到的问题 千万不要忘了把minio-storage添加到app
Add minio_storage to INSTALLED_APPS in your project settings. The last step is setting DEFAULT_FILE_STORAGE to &amp;quot;minio_storage.storage.MinioMediaStorage&amp;quot;, and STATICFILES_STORAGE to &amp;quot;minio_storage.storage.MinioStaticStorage&amp;quot;. 接下来的配置看官网配置就行了
因为我用docker写的所以minio_storage_endpoint可以使用docker项目名称:端口号或者外网域名（static.media.com）或者外网IP:端口号
浏览器复用minio静态服务器的media携带端口号怎么办？
解决办法 nginx 负载均衡：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 upstream docker { server docker:9000; } server { listen 80; server_name static.media.com location / { proxy_set_header Host $host; proxy_pass http://docker; client_max_body_size 10m; } } </description>
    </item>
    
    <item>
      <title>Django Minio开发过程</title>
      <link>https://sunnnner.github.io/p/django-minio%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sun, 06 Oct 2019 14:17:12 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django-minio%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</guid>
      <description> 使用Django-minio-storage进行开发minio的静态文件存储功能，本来寻思用minio直接进行开发，既然django有这个包我们就拿来用一下
项目说明django-minio-storage 开发期间遇到的问题 千万不要忘了把minio-storage添加到app
Add minio_storage to INSTALLED_APPS in your project settings. The last step is setting DEFAULT_FILE_STORAGE to &amp;quot;minio_storage.storage.MinioMediaStorage&amp;quot;, and STATICFILES_STORAGE to &amp;quot;minio_storage.storage.MinioStaticStorage&amp;quot;. 接下来的配置看官网配置就行了
因为我用docker写的所以minio_storage_endpoint可以使用docker项目名称:端口号或者外网域名（static.media.com）或者外网IP:端口号
浏览器复用minio静态服务器的media携带端口号怎么办？
解决办法 nginx 负载均衡：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 upstream docker { server docker:9000; } server { listen 80; server_name static.media.com location / { proxy_set_header Host $host; proxy_pass http://docker; client_max_body_size 10m; } } </description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>https://sunnnner.github.io/jwt/</link>
      <pubDate>Wed, 02 Oct 2019 14:08:17 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/jwt/</guid>
      <description>JWT——Json web token 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准，可实现无状态、分布式的Web应用授权。 1.1 传统方式 XSS的原理分析与解剖
前后端分离通过Restful API进行数据交互时，如何验证用户的登录信息及权限。在原来的项目中，使用的是最传统也是最简单的方式，前端登录，后端根据用户信息生成一个token，并保存这个 token 和对应的用户id到数据库或Session中，接着把 token 传给用户，存入浏览器 cookie，之后浏览器请求带上这个cookie，后端根据这个cookie值来查询用户，验证是否过期。 但这样做问题就很多，如果我们的页面出现了 XSS 漏洞，由于 cookie 可以被 JavaScript 读取，XSS 漏洞会导致用户 token 泄露，而作为后端识别用户的标识，cookie 的泄露意味着用户信息不再安全。尽管我们通过转义输出内容，使用 CDN 等可以尽量避免 XSS 注入，但谁也不能保证在大型的项目中不会出现这个问题。 在设置 cookie 的时候，其实你还可以设置 httpOnly 以及 secure(保护)项。设置 httpOnly 后 cookie 将不能被 JS 读取，浏览器会自动的把它加在请求的 header 当中，设置 secure 的话，cookie 就只允许通过 HTTPS 传输。secure 选项可以过滤掉一些使用 HTTP 协议的 XSS 注入，但并不能完全阻止。 httpOnly 选项使得 JS 不能读取到 cookie，那么 XSS 注入的问题也基本不用担心了。但设置 httpOnly 就带来了另一个问题，就是很容易的被 XSRF，即跨站请求伪造。当你浏览器开着这个页面的时候，另一个页面可以很容易的跨站请求这个页面的内容。因为 cookie 默认被发了出去。 另外，如果将验证信息保存在数据库中，后端每次都需要根据token查出用户id，这就增加了数据库的查询和存储开销。若把验证信息保存在session中，有加大了服务器端的存储压力。那我们可不可以不要服务器去查询呢？如果我们生成token遵循一定的规律，比如我们使用对称加密算法来加密用户id形成token，那么服务端以后其实只要解密该token就可以知道用户的id是什么了。不过呢，我只是举个例子而已，要是真这么做，只要你的对称加密算法泄露了，其他人可以通过这种加密方式进行伪造token，那么所有用户信息都不再安全了。恩，那用非对称加密算法来做呢，其实现在有个规范就是这样做的，就是我们接下来要介绍的 JWT。 Json Web Token（JWT） JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点： 简洁(Compact) 可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快 自包含(Self-contained) 负载中包含了所有用户所需要的信息，避免了多次查询数据库 JWT 组成 Header 头部 头部包含了两部分，token 类型和采用的加密算法 1 2 3 4 { &amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;, &amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34; } 它会使用 Base64 编码组成 JWT 结构的第一部分,如果你使用Node.</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>https://sunnnner.github.io/p/jwt/</link>
      <pubDate>Wed, 02 Oct 2019 14:08:17 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/jwt/</guid>
      <description>JWT——Json web token 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准，可实现无状态、分布式的Web应用授权。 1.1 传统方式 XSS的原理分析与解剖
前后端分离通过Restful API进行数据交互时，如何验证用户的登录信息及权限。在原来的项目中，使用的是最传统也是最简单的方式，前端登录，后端根据用户信息生成一个token，并保存这个 token 和对应的用户id到数据库或Session中，接着把 token 传给用户，存入浏览器 cookie，之后浏览器请求带上这个cookie，后端根据这个cookie值来查询用户，验证是否过期。 但这样做问题就很多，如果我们的页面出现了 XSS 漏洞，由于 cookie 可以被 JavaScript 读取，XSS 漏洞会导致用户 token 泄露，而作为后端识别用户的标识，cookie 的泄露意味着用户信息不再安全。尽管我们通过转义输出内容，使用 CDN 等可以尽量避免 XSS 注入，但谁也不能保证在大型的项目中不会出现这个问题。 在设置 cookie 的时候，其实你还可以设置 httpOnly 以及 secure(保护)项。设置 httpOnly 后 cookie 将不能被 JS 读取，浏览器会自动的把它加在请求的 header 当中，设置 secure 的话，cookie 就只允许通过 HTTPS 传输。secure 选项可以过滤掉一些使用 HTTP 协议的 XSS 注入，但并不能完全阻止。 httpOnly 选项使得 JS 不能读取到 cookie，那么 XSS 注入的问题也基本不用担心了。但设置 httpOnly 就带来了另一个问题，就是很容易的被 XSRF，即跨站请求伪造。当你浏览器开着这个页面的时候，另一个页面可以很容易的跨站请求这个页面的内容。因为 cookie 默认被发了出去。 另外，如果将验证信息保存在数据库中，后端每次都需要根据token查出用户id，这就增加了数据库的查询和存储开销。若把验证信息保存在session中，有加大了服务器端的存储压力。那我们可不可以不要服务器去查询呢？如果我们生成token遵循一定的规律，比如我们使用对称加密算法来加密用户id形成token，那么服务端以后其实只要解密该token就可以知道用户的id是什么了。不过呢，我只是举个例子而已，要是真这么做，只要你的对称加密算法泄露了，其他人可以通过这种加密方式进行伪造token，那么所有用户信息都不再安全了。恩，那用非对称加密算法来做呢，其实现在有个规范就是这样做的，就是我们接下来要介绍的 JWT。 Json Web Token（JWT） JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点： 简洁(Compact) 可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快 自包含(Self-contained) 负载中包含了所有用户所需要的信息，避免了多次查询数据库 JWT 组成 Header 头部 头部包含了两部分，token 类型和采用的加密算法 1 2 3 4 { &amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;, &amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34; } 它会使用 Base64 编码组成 JWT 结构的第一部分,如果你使用Node.</description>
    </item>
    
    <item>
      <title>TOKEN验证详解</title>
      <link>https://sunnnner.github.io/token%E9%AA%8C%E8%AF%81%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 01 Oct 2019 14:03:37 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/token%E9%AA%8C%E8%AF%81%E8%AF%A6%E8%A7%A3/</guid>
      <description>为什么使用token验证 在web领域基于token的身份验证随处可变，在大多说使用web API的互联网公司中，tokens是多用户下处理认证的最佳方式 一下几点特性会让你在程序中使用基于Token 的身份验证 无状态、可扩展 支持移动设备 跨程序调用 安全 那些使用基于Token的身份验证的大佬们 大部分你见到过的API和WEB应用都是用tokens，列如facebook, twitter, google+, github等 Token的起源 在介绍基于token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的
基于服务器的验证 我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。 在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。 随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。 基于服务器的验证方式暴露的一些问题 1、session：每次认证用户发起请求时， 服务器需要去创建一个记录来存储信息， 当越来越多的用户发请求时， 内存的开销也会不断增加 2、可获振兴：在服务端的内存中使用session存储的登录信息，办所而来的是可扩展性问题 3、CORS（跨域资源共享）： 当我们需要让数据跨多台移动设备上使用时， 跨域资源共享回事一个让人头疼的问题， 在使用ajax抓取另一个域的资源，就可以会出现禁止请求的情况 4、CSRF（跨站请求伪造）： 用户在访问银行网站时， 他们很容易受到跨站请求伪造的攻击， 并且能够被利用其访问其他网站 在这些问题中，可扩展性是最突出，因此我们有必要去寻求一种更有行之有效的方法 基于TOKEN的验证原理 基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。 这种概念解决了在服务端存储信息时的许多问题 NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。 基于Token的身份验证的过程如下: 1.用户通过用户名和密码发送请求。 2.程序验证。 3.程序返回一个签名的token 给客户端。 4.客户端储存token,并且每次用于每次发送请求。 5.服务端验证token并返回数据。 每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin:* ，让服务器能接受到来自所有域的请求。需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。 代码实例流程： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 //用户第一次登录 username pwd client_type //接口判断 if(token&amp;amp;uid){ 查询token表 $token=where uid =uid if($token==token){ 登录成功！！ 返回token 和 uid }else{ 登录失败！！ } } if(usename powd client_type){ 检验用户名和密码 if（正确）{ 得到uid 并 生成token（md5( uid.</description>
    </item>
    
    <item>
      <title>TOKEN验证详解</title>
      <link>https://sunnnner.github.io/p/token%E9%AA%8C%E8%AF%81%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 01 Oct 2019 14:03:37 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/token%E9%AA%8C%E8%AF%81%E8%AF%A6%E8%A7%A3/</guid>
      <description>为什么使用token验证 在web领域基于token的身份验证随处可变，在大多说使用web API的互联网公司中，tokens是多用户下处理认证的最佳方式 一下几点特性会让你在程序中使用基于Token 的身份验证 无状态、可扩展 支持移动设备 跨程序调用 安全 那些使用基于Token的身份验证的大佬们 大部分你见到过的API和WEB应用都是用tokens，列如facebook, twitter, google+, github等 Token的起源 在介绍基于token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的
基于服务器的验证 我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。 在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。 随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。 基于服务器的验证方式暴露的一些问题 1、session：每次认证用户发起请求时， 服务器需要去创建一个记录来存储信息， 当越来越多的用户发请求时， 内存的开销也会不断增加 2、可获振兴：在服务端的内存中使用session存储的登录信息，办所而来的是可扩展性问题 3、CORS（跨域资源共享）： 当我们需要让数据跨多台移动设备上使用时， 跨域资源共享回事一个让人头疼的问题， 在使用ajax抓取另一个域的资源，就可以会出现禁止请求的情况 4、CSRF（跨站请求伪造）： 用户在访问银行网站时， 他们很容易受到跨站请求伪造的攻击， 并且能够被利用其访问其他网站 在这些问题中，可扩展性是最突出，因此我们有必要去寻求一种更有行之有效的方法 基于TOKEN的验证原理 基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。 这种概念解决了在服务端存储信息时的许多问题 NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。 基于Token的身份验证的过程如下: 1.用户通过用户名和密码发送请求。 2.程序验证。 3.程序返回一个签名的token 给客户端。 4.客户端储存token,并且每次用于每次发送请求。 5.服务端验证token并返回数据。 每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin:* ，让服务器能接受到来自所有域的请求。需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。 代码实例流程： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 //用户第一次登录 username pwd client_type //接口判断 if(token&amp;amp;uid){ 查询token表 $token=where uid =uid if($token==token){ 登录成功！！ 返回token 和 uid }else{ 登录失败！！ } } if(usename powd client_type){ 检验用户名和密码 if（正确）{ 得到uid 并 生成token（md5( uid.</description>
    </item>
    
    <item>
      <title>Django中的FBV和CBV</title>
      <link>https://sunnnner.github.io/django%E4%B8%AD%E7%9A%84fbv%E5%92%8Ccbv/</link>
      <pubDate>Thu, 05 Sep 2019 11:34:25 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django%E4%B8%AD%E7%9A%84fbv%E5%92%8Ccbv/</guid>
      <description>FBV fbv就是在url中一个路径对应一个函数
1 2 3 4 urlpatterns = [ url(r&amp;#39;^admin/&amp;#39;, admin.site.urls), url(r&amp;#39;^index/&amp;#39;, views.index) ] 视图函数中 1 2 def index(request): return render(request, &amp;#39;index.html&amp;#39;) CBV cbv就是在url中一个路径对应一个类
1 2 3 4 urlpatterns = [ url(r&amp;#39;^admin/&amp;#39;, admin.site.urls), url(r&amp;#39;^index/&amp;#39;, views.IndexView.as_views()) # 执行类后面的as_view()方法 ] 视图函数中 1 2 3 4 5 6 7 8 9 from django.views import View class IndexView(View): # 以get形式访问会执行get函数，一般情况下获取数据 def get(self, *args, **keargs): return HttpResponse(&amp;#39;6666&amp;#39;) # 以post形式访问的话会执行post函数，一般情况下发送数据 def post(self, *args, **kwargs): return HttpResponse(&amp;#39;post ok&amp;#39;) 注意: cbv定义类的时候必须要继承view 在写URL的时候必须要加as_view 类里面使用form表单提交的话只有get和post方法 restful规范：’get’获取数据, ‘post’创建新数据, ‘put’更新, ‘patch’局部更新, ‘delete’删除, ‘head’, ‘options’, ‘trace’ CBV重新定义dispatch函数 所有的方法本质上都是通过dispatch这个函数反射执行，如果想要在执行get或post方法前执行其他步骤，可以重写dispatch </description>
    </item>
    
    <item>
      <title>Django中的FBV和CBV</title>
      <link>https://sunnnner.github.io/p/django%E4%B8%AD%E7%9A%84fbv%E5%92%8Ccbv/</link>
      <pubDate>Thu, 05 Sep 2019 11:34:25 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django%E4%B8%AD%E7%9A%84fbv%E5%92%8Ccbv/</guid>
      <description>FBV fbv就是在url中一个路径对应一个函数
1 2 3 4 urlpatterns = [ url(r&amp;#39;^admin/&amp;#39;, admin.site.urls), url(r&amp;#39;^index/&amp;#39;, views.index) ] 视图函数中 1 2 def index(request): return render(request, &amp;#39;index.html&amp;#39;) CBV cbv就是在url中一个路径对应一个类
1 2 3 4 urlpatterns = [ url(r&amp;#39;^admin/&amp;#39;, admin.site.urls), url(r&amp;#39;^index/&amp;#39;, views.IndexView.as_views()) # 执行类后面的as_view()方法 ] 视图函数中 1 2 3 4 5 6 7 8 9 from django.views import View class IndexView(View): # 以get形式访问会执行get函数，一般情况下获取数据 def get(self, *args, **keargs): return HttpResponse(&amp;#39;6666&amp;#39;) # 以post形式访问的话会执行post函数，一般情况下发送数据 def post(self, *args, **kwargs): return HttpResponse(&amp;#39;post ok&amp;#39;) 注意: cbv定义类的时候必须要继承view 在写URL的时候必须要加as_view 类里面使用form表单提交的话只有get和post方法 restful规范：’get’获取数据, ‘post’创建新数据, ‘put’更新, ‘patch’局部更新, ‘delete’删除, ‘head’, ‘options’, ‘trace’ CBV重新定义dispatch函数 所有的方法本质上都是通过dispatch这个函数反射执行，如果想要在执行get或post方法前执行其他步骤，可以重写dispatch </description>
    </item>
    
    <item>
      <title>Django定义USER四中方式</title>
      <link>https://sunnnner.github.io/django%E5%AE%9A%E4%B9%89user%E5%9B%9B%E4%B8%AD%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 03 Sep 2018 10:30:05 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django%E5%AE%9A%E4%B9%89user%E5%9B%9B%E4%B8%AD%E6%96%B9%E5%BC%8F/</guid>
      <description>设计user models
django本身的auth_user 只包含了基本的信息包括用户名，密码，邮箱以及注册时间和最新的登录时间，但是这些字段很难满足我们的要求，有时我们想记录用户更多的信息，例如手机号等信息，这时就需要在auth_user 的基础上增加字段，django自定义User网上有四种方法。
是官网上推荐的方法，就是增加一个表auth_profile，其中以auth_user 表中的id作为Forgein Key将两个表过关联起来，这样可以在auth_profile 中增加多个用户的信息。
另外一种是修改django的源码，这种方法简单暴力直接，但是这种方法可移植性差，不利于多项目部署。
继承django auth/models 中的User继续增加字段，这种方法需要修改setting中的AUTH_USER_MODEL=‘app.User’ app为你自定义的app，INSTALLED_APP中要包含Contenttypes和auth两个app，class meta中 db_table 要指定为auth_user, 如果要在admin中管理用户的话，需要将app_label 进行指定。而且要在admin中重新定义UserAdmin 将新添加的字段写在list_display和add_fields中。详见django.contrib.auth.admin中。
重写User，也就是继承AbstractUser和Permissions两个类，其实django的User Model也是继承自这两个类，因此你可以做类似User的定义方法定义User。
记录是否执行了迁移文件靠的是django_migrations这表</description>
    </item>
    
    <item>
      <title>Django定义USER四中方式</title>
      <link>https://sunnnner.github.io/p/django%E5%AE%9A%E4%B9%89user%E5%9B%9B%E4%B8%AD%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 03 Sep 2018 10:30:05 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django%E5%AE%9A%E4%B9%89user%E5%9B%9B%E4%B8%AD%E6%96%B9%E5%BC%8F/</guid>
      <description>设计user models
django本身的auth_user 只包含了基本的信息包括用户名，密码，邮箱以及注册时间和最新的登录时间，但是这些字段很难满足我们的要求，有时我们想记录用户更多的信息，例如手机号等信息，这时就需要在auth_user 的基础上增加字段，django自定义User网上有四种方法。
是官网上推荐的方法，就是增加一个表auth_profile，其中以auth_user 表中的id作为Forgein Key将两个表过关联起来，这样可以在auth_profile 中增加多个用户的信息。
另外一种是修改django的源码，这种方法简单暴力直接，但是这种方法可移植性差，不利于多项目部署。
继承django auth/models 中的User继续增加字段，这种方法需要修改setting中的AUTH_USER_MODEL=‘app.User’ app为你自定义的app，INSTALLED_APP中要包含Contenttypes和auth两个app，class meta中 db_table 要指定为auth_user, 如果要在admin中管理用户的话，需要将app_label 进行指定。而且要在admin中重新定义UserAdmin 将新添加的字段写在list_display和add_fields中。详见django.contrib.auth.admin中。
重写User，也就是继承AbstractUser和Permissions两个类，其实django的User Model也是继承自这两个类，因此你可以做类似User的定义方法定义User。
记录是否执行了迁移文件靠的是django_migrations这表</description>
    </item>
    
    <item>
      <title>Django用户模块</title>
      <link>https://sunnnner.github.io/django%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 01 Jun 2018 10:15:16 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/django%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</guid>
      <description>第一步创建Django项目 django-admin startproject blog 创建第一个应用user python manage.py startapp user 设置setting文件 1 2 ALLOWED_HOSTS=[“*”]//更改为所有都可以访问上线模式 INSTALLEN_APPS—》加入第一个user应用 创建templates文件夹 并设置TEMPLATES里面文件夹的路径os.path.join 设置DATABASES的储存为mysql 1 2 3 4 5 6 7 8 9 10 11 字段 DATABASES = { &amp;#39;default&amp;#39;: { &amp;#39;ENGINE&amp;#39;: &amp;#39;django.db.backends.mysql&amp;#39;, &amp;#39;NAME&amp;#39;: &amp;#39;bookstore&amp;#39;, &amp;#39;USER&amp;#39;:&amp;#39;root&amp;#39;, &amp;#39;PASSWORD&amp;#39;:&amp;#39;123&amp;#39;, &amp;#39;HOST&amp;#39;:&amp;#39;localhost&amp;#39;, &amp;#39;PORT&amp;#39;:3306, } } 修改语言与时区 1 2 3 LANGUAGE_CODE = &amp;#39;zh-Hans&amp;#39; TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; 设置静态文件收集static文件夹并在setting设置 1 2 3 4 STATIC_URL = &amp;#39;/static/&amp;#39; STATICFILES_DIRS = [ os.path.join(BASE_DIR, &amp;#39;static&amp;#39;) ] 设置主页url与视图函数 1 2 3 url(r&amp;#39;^$&amp;#39;,index,name=&amp;#39;index&amp;#39;) def index(request): return render(request, &amp;#39;index.</description>
    </item>
    
    <item>
      <title>Django用户模块</title>
      <link>https://sunnnner.github.io/p/django%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 01 Jun 2018 10:15:16 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/django%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</guid>
      <description>第一步创建Django项目 django-admin startproject blog 创建第一个应用user python manage.py startapp user 设置setting文件 1 2 ALLOWED_HOSTS=[“*”]//更改为所有都可以访问上线模式 INSTALLEN_APPS—》加入第一个user应用 创建templates文件夹 并设置TEMPLATES里面文件夹的路径os.path.join 设置DATABASES的储存为mysql 1 2 3 4 5 6 7 8 9 10 11 字段 DATABASES = { &amp;#39;default&amp;#39;: { &amp;#39;ENGINE&amp;#39;: &amp;#39;django.db.backends.mysql&amp;#39;, &amp;#39;NAME&amp;#39;: &amp;#39;bookstore&amp;#39;, &amp;#39;USER&amp;#39;:&amp;#39;root&amp;#39;, &amp;#39;PASSWORD&amp;#39;:&amp;#39;123&amp;#39;, &amp;#39;HOST&amp;#39;:&amp;#39;localhost&amp;#39;, &amp;#39;PORT&amp;#39;:3306, } } 修改语言与时区 1 2 3 LANGUAGE_CODE = &amp;#39;zh-Hans&amp;#39; TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; 设置静态文件收集static文件夹并在setting设置 1 2 3 4 STATIC_URL = &amp;#39;/static/&amp;#39; STATICFILES_DIRS = [ os.path.join(BASE_DIR, &amp;#39;static&amp;#39;) ] 设置主页url与视图函数 1 2 3 url(r&amp;#39;^$&amp;#39;,index,name=&amp;#39;index&amp;#39;) def index(request): return render(request, &amp;#39;index.</description>
    </item>
    
    <item>
      <title>页面开发</title>
      <link>https://sunnnner.github.io/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 31 May 2018 18:47:29 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/</guid>
      <description>首先新建app—&amp;gt;books并添加settings里面 因为我们需要在后台admin上传数据所以我们要创建富文本管理器并在setting设置他的选项 富文本管理器是一个插件我们这次使用的是tinymce并且我们需要将它加入到apps里面因为他是一个应用，但是这个应用是需要下载的 1 2 3 4 5 TINTMCE_DEFAULT_CONFIG = { &amp;#39;theme&amp;#39;: &amp;#34;modern&amp;#34;, &amp;#39;wight&amp;#39;: 600, &amp;#39;height&amp;#39;: 400, } 我们需要设置制定一个媒体文件夹来存放我们的图片MEDIA_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
添加应用的urls``
1 2 url(r&amp;#39;^books/&amp;#39;, include(&amp;#39;books.urls&amp;#39;,namespace=&amp;#39;books&amp;#39;)), url(r&amp;#39;^tinymce/&amp;#39;, include(&amp;#39;tinymce.urls&amp;#39;,namespace=&amp;#39;tinymce&amp;#39;)), 我们开始写books里面的字段首先查看页面我们需要什么字段 首先我们创建tinymac富文本需要的字段，这里的字段映射全局 在books目录下创建任意的.py文件这里我的是emums.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 此处1，2，3，4代表书本的id PYTHON = 1 JAVASCRIPT = 2 ALGORITHMS = 3 MACHINELEARNING = 4 OPERATINSGYSTEM = 5 DATABASE = 6 # BOOKS_TYPE作为一个字典传输到models BOOKS_TYPE = { PYTHON: &amp;#39;python&amp;#39;, JAVASCRIPT: &amp;#39;javascript&amp;#39;, ALGORITHMS: &amp;#39;数据库结构与算法&amp;#39;, MACHINELEARNING: &amp;#39;机器学习&amp;#39;, OPERATINSGYSTEM: &amp;#39;操作系统&amp;#39;, DATABASE: &amp;#39;数据库&amp;#39;, } # 代表商品的上线或者下线状态 OFFLINE = 0 ONLINE = 1 STATUS_CHOICE = { OFFLINE: &amp;#39;下线&amp;#39;, ONLINE: &amp;#39;上线&amp;#39;, } 我们开始写models.</description>
    </item>
    
    <item>
      <title>页面开发</title>
      <link>https://sunnnner.github.io/p/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 31 May 2018 18:47:29 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/</guid>
      <description>首先新建app—&amp;gt;books并添加settings里面 因为我们需要在后台admin上传数据所以我们要创建富文本管理器并在setting设置他的选项 富文本管理器是一个插件我们这次使用的是tinymce并且我们需要将它加入到apps里面因为他是一个应用，但是这个应用是需要下载的 1 2 3 4 5 TINTMCE_DEFAULT_CONFIG = { &amp;#39;theme&amp;#39;: &amp;#34;modern&amp;#34;, &amp;#39;wight&amp;#39;: 600, &amp;#39;height&amp;#39;: 400, } 我们需要设置制定一个媒体文件夹来存放我们的图片MEDIA_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
添加应用的urls``
1 2 url(r&amp;#39;^books/&amp;#39;, include(&amp;#39;books.urls&amp;#39;,namespace=&amp;#39;books&amp;#39;)), url(r&amp;#39;^tinymce/&amp;#39;, include(&amp;#39;tinymce.urls&amp;#39;,namespace=&amp;#39;tinymce&amp;#39;)), 我们开始写books里面的字段首先查看页面我们需要什么字段 首先我们创建tinymac富文本需要的字段，这里的字段映射全局 在books目录下创建任意的.py文件这里我的是emums.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 此处1，2，3，4代表书本的id PYTHON = 1 JAVASCRIPT = 2 ALGORITHMS = 3 MACHINELEARNING = 4 OPERATINSGYSTEM = 5 DATABASE = 6 # BOOKS_TYPE作为一个字典传输到models BOOKS_TYPE = { PYTHON: &amp;#39;python&amp;#39;, JAVASCRIPT: &amp;#39;javascript&amp;#39;, ALGORITHMS: &amp;#39;数据库结构与算法&amp;#39;, MACHINELEARNING: &amp;#39;机器学习&amp;#39;, OPERATINSGYSTEM: &amp;#39;操作系统&amp;#39;, DATABASE: &amp;#39;数据库&amp;#39;, } # 代表商品的上线或者下线状态 OFFLINE = 0 ONLINE = 1 STATUS_CHOICE = { OFFLINE: &amp;#39;下线&amp;#39;, ONLINE: &amp;#39;上线&amp;#39;, } 我们开始写models.</description>
    </item>
    
  </channel>
</rss>

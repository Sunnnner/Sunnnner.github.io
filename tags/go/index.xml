<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on whiteKBlog</title>
    <link>https://sunnnner.github.io/tags/go/</link>
    <description>Recent content in go on whiteKBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Feb 2020 15:52:00 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言数据类型</title>
      <link>https://sunnnner.github.io/go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 02 Feb 2020 15:52:00 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>派生 包括： 指针类型(Pointer) 数组类型 结构化类型(struct) Channel类型 函数类型 切片类型 接口类型(interface) Map类型 浮点型 float32与float64 complex64与complex128 64位的实数与虚数 其他数字类型 byte 类似uint8 rune 类似int32 uint 32或者64位 int 与uint一样大 uintptr 无符号整型，用于存放一个指针 </description>
    </item>
    
    <item>
      <title>Go语言数据类型</title>
      <link>https://sunnnner.github.io/p/go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 02 Feb 2020 15:52:00 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>派生 包括： 指针类型(Pointer) 数组类型 结构化类型(struct) Channel类型 函数类型 切片类型 接口类型(interface) Map类型 浮点型 float32与float64 complex64与complex128 64位的实数与虚数 其他数字类型 byte 类似uint8 rune 类似int32 uint 32或者64位 int 与uint一样大 uintptr 无符号整型，用于存放一个指针 </description>
    </item>
    
    <item>
      <title>Go学习</title>
      <link>https://sunnnner.github.io/go%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 01 Feb 2020 15:45:32 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/go%E5%AD%A6%E4%B9%A0/</guid>
      <description>Go关键字 关键字 意义 break 退出 default 默认函数 func 定义函数和方法 interface 用于定义接口 select 用于选择不同类型的通讯 case 用户条件选择 defer 延迟执行内容（收尾工作）有点类似C++的析构，但是它是再函数结尾的时候去执行（也就是栈即将被释放的时候） go 用于并发 map 用于声明map类型数据 struct 用于定义抽象数据类型 range 用于读取slice、map、channel数据 chan 用于channel通讯 if 选择结构-如果 else 选择结构-否则 type 用于声明自定义类型 return 用于从函数返回 var Go语言基础里面的变量和常量申明 (var age int) const 变量和常量的声明 package 包管理 import 导入 switch 选择结构 fallthrough 流程控制1.加了fallthrough后，会直接运行【紧跟的后一个】case或default语句，不论条件是否满足都会执行)2.加了fallthrough语句后，【紧跟的后一个】case条件不能定义常量和变量3.执行完fallthrough后直接跳到下一个条件语句，本条件执行语句后面的语句不执行 continue 跳过本次循环 for 循环 goto 跳转语句 36个预定义标识符 内建常量 内建类型 内建函数 true int make false int8 len iota int16 cap nil int32 new - int64 append - uint copy - uint8 close - uint16 delete - uint32 complex - uint64 real - uintprt imag - float32 panic - float64 recover - complex64 - - complex128 - - bool - - byte - - rune - - string - - error - </description>
    </item>
    
    <item>
      <title>Go学习</title>
      <link>https://sunnnner.github.io/p/go%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 01 Feb 2020 15:45:32 +0800</pubDate>
      
      <guid>https://sunnnner.github.io/p/go%E5%AD%A6%E4%B9%A0/</guid>
      <description>Go关键字 关键字 意义 break 退出 default 默认函数 func 定义函数和方法 interface 用于定义接口 select 用于选择不同类型的通讯 case 用户条件选择 defer 延迟执行内容（收尾工作）有点类似C++的析构，但是它是再函数结尾的时候去执行（也就是栈即将被释放的时候） go 用于并发 map 用于声明map类型数据 struct 用于定义抽象数据类型 range 用于读取slice、map、channel数据 chan 用于channel通讯 if 选择结构-如果 else 选择结构-否则 type 用于声明自定义类型 return 用于从函数返回 var Go语言基础里面的变量和常量申明 (var age int) const 变量和常量的声明 package 包管理 import 导入 switch 选择结构 fallthrough 流程控制1.加了fallthrough后，会直接运行【紧跟的后一个】case或default语句，不论条件是否满足都会执行)2.加了fallthrough语句后，【紧跟的后一个】case条件不能定义常量和变量3.执行完fallthrough后直接跳到下一个条件语句，本条件执行语句后面的语句不执行 continue 跳过本次循环 for 循环 goto 跳转语句 36个预定义标识符 内建常量 内建类型 内建函数 true int make false int8 len iota int16 cap nil int32 new - int64 append - uint copy - uint8 close - uint16 delete - uint32 complex - uint64 real - uintprt imag - float32 panic - float64 recover - complex64 - - complex128 - - bool - - byte - - rune - - string - - error - </description>
    </item>
    
  </channel>
</rss>

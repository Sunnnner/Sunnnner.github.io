<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on whiteKBlog</title><link>https://sunnnner.github.io/tags/go/</link><description>Recent content in go on whiteKBlog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Feb 2020 15:52:00 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go语言数据类型</title><link>https://sunnnner.github.io/archetypes/go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 02 Feb 2020 15:52:00 +0800</pubDate><guid>https://sunnnner.github.io/archetypes/go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>&lt;h2 id="派生">派生&lt;/h2>
&lt;pre>&lt;code>包括：
指针类型(Pointer)
数组类型
&lt;/code>&lt;/pre>
&lt;h2 id="结构化类型struct">结构化类型(struct)&lt;/h2>
&lt;pre>&lt;code>Channel类型
函数类型
切片类型
接口类型(interface)
Map类型
&lt;/code>&lt;/pre>
&lt;h2 id="浮点型">浮点型&lt;/h2>
&lt;pre>&lt;code>float32与float64
complex64与complex128 64位的实数与虚数
&lt;/code>&lt;/pre>
&lt;h2 id="其他数字类型">其他数字类型&lt;/h2>
&lt;pre>&lt;code>byte 类似uint8
rune 类似int32
uint 32或者64位
int 与uint一样大
uintptr 无符号整型，用于存放一个指针&lt;/code>&lt;/pre></description></item><item><title>Go学习</title><link>https://sunnnner.github.io/archetypes/go%E5%AD%A6%E4%B9%A0/</link><pubDate>Sat, 01 Feb 2020 15:45:32 +0800</pubDate><guid>https://sunnnner.github.io/archetypes/go%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h1 id="go关键字">Go关键字&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>意义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>break&lt;/td>
&lt;td>退出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>default&lt;/td>
&lt;td>默认函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>func&lt;/td>
&lt;td>定义函数和方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interface&lt;/td>
&lt;td>用于定义接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>select&lt;/td>
&lt;td>用于选择不同类型的通讯&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>case&lt;/td>
&lt;td>用户条件选择&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>defer&lt;/td>
&lt;td>延迟执行内容（收尾工作）有点类似C++的析构，但是它是再函数结尾的时候去执行（也就是栈即将被释放的时候）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go&lt;/td>
&lt;td>用于并发&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>map&lt;/td>
&lt;td>用于声明map类型数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>struct&lt;/td>
&lt;td>用于定义抽象数据类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range&lt;/td>
&lt;td>用于读取slice、map、channel数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chan&lt;/td>
&lt;td>用于channel通讯&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>if&lt;/td>
&lt;td>选择结构-如果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>else&lt;/td>
&lt;td>选择结构-否则&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type&lt;/td>
&lt;td>用于声明自定义类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>return&lt;/td>
&lt;td>用于从函数返回&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>var&lt;/td>
&lt;td>Go语言基础里面的变量和常量申明 (var age int)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>const&lt;/td>
&lt;td>变量和常量的声明&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>package&lt;/td>
&lt;td>包管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>import&lt;/td>
&lt;td>导入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>switch&lt;/td>
&lt;td>选择结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fallthrough&lt;/td>
&lt;td>流程控制&lt;!-- raw HTML omitted -->1.加了fallthrough后，会直接运行【紧跟的后一个】case或default语句，不论条件是否满足都会执行)&lt;!-- raw HTML omitted -->2.加了fallthrough语句后，【紧跟的后一个】case条件不能定义常量和变量&lt;!-- raw HTML omitted -->3.执行完fallthrough后直接跳到下一个条件语句，本条件执行语句后面的语句不执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>continue&lt;/td>
&lt;td>跳过本次循环&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>for&lt;/td>
&lt;td>循环&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>goto&lt;/td>
&lt;td>跳转语句&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="36个预定义标识符">36个预定义标识符&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>内建常量&lt;/th>
&lt;th>内建类型&lt;/th>
&lt;th>内建函数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>true&lt;/td>
&lt;td>int&lt;/td>
&lt;td>make&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>false&lt;/td>
&lt;td>int8&lt;/td>
&lt;td>len&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iota&lt;/td>
&lt;td>int16&lt;/td>
&lt;td>cap&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nil&lt;/td>
&lt;td>int32&lt;/td>
&lt;td>new&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>int64&lt;/td>
&lt;td>append&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>uint&lt;/td>
&lt;td>copy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>uint8&lt;/td>
&lt;td>close&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>uint16&lt;/td>
&lt;td>delete&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>uint32&lt;/td>
&lt;td>complex&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>uint64&lt;/td>
&lt;td>real&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>uintprt&lt;/td>
&lt;td>imag&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>float32&lt;/td>
&lt;td>panic&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>float64&lt;/td>
&lt;td>recover&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>complex64&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>complex128&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>byte&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>rune&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>string&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>error&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://sunnnner.github.io/static/go.jpg"
loading="lazy"
alt="xx"
>&lt;/p></description></item></channel></rss>
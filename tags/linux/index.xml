<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on whiteKBlog</title><link>https://sunnnner.github.io/tags/linux/</link><description>Recent content in linux on whiteKBlog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 Sep 2019 11:39:55 +0800</lastBuildDate><atom:link href="https://sunnnner.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>什么是跨域及解决办法</title><link>https://sunnnner.github.io/%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Mon, 09 Sep 2019 11:39:55 +0800</pubDate><guid>https://sunnnner.github.io/%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>&lt;pre>&lt;code>跨域
浏览器从一个域名的网页去请求另一个域名的资源时,浏览器处于安全的考虑,不允许不同源的请求
同源策略：协议相同， 域名相同， 端口相同
处理办法： 通过JSONP跨域
JSON是一种数据交换格式
JSONP是一种非官方的跨域数据交互协议
JSONP是包含在函数调用中的json
sjonp是包含在函数调用中的json
script标签不收同源策略的影响，手动创建一个script标签，传递URL， 同时传入一个回调函数的名字
服务器得到名字后， 返回数据时会用这个函数名来包裹数据， 客户端获取到数据之后， 立即吧script标签删掉
cors：跨域资源共享
使用自定义的HTTP头部允许浏览器和服务器相互通信
如果是简单请求,直接设置允许访问的域名：
允许你的域名来获取我的数据
response[‘Access-Control-Allow-Origin‘] = “*”
如果是复杂请求,首先会发送options请求做预检,然后再发送真正的PUT/POST….请求
因此如果复杂请求是PUT等请求,则服务端需要设置允许某请求
如果复杂请求设置了请求头，则服务端需要设置允许某请求头
简单请求：
一次请求
非简单请求：
两次请求，在发送数据之前会先发一次请求用于做“预检”，
只有“预检”通过后才再发送一次请求用于数据传输。
只要同时满足以下两大条件，就属于简单请求。
(1) 请求方法是以下三种方法之一：HEAD GET POST
(2)HTTP的头信息不超出以下几种字段：
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Accept
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Language
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Language
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Last-Event-ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、 text/plain
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>JSONP和CORS：&lt;/p>
&lt;pre>&lt;code>1.JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求
2.jsonp需要client和server端的相互配合
3.cors在client端无需设置，server端需要针对不同的请求，来做head头的处理&lt;/code>&lt;/pre></description></item><item><title>什么是跨域及解决办法</title><link>https://sunnnner.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Mon, 09 Sep 2019 11:39:55 +0800</pubDate><guid>https://sunnnner.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>&lt;pre>&lt;code>跨域
浏览器从一个域名的网页去请求另一个域名的资源时,浏览器处于安全的考虑,不允许不同源的请求
同源策略：协议相同， 域名相同， 端口相同
处理办法： 通过JSONP跨域
JSON是一种数据交换格式
JSONP是一种非官方的跨域数据交互协议
JSONP是包含在函数调用中的json
sjonp是包含在函数调用中的json
script标签不收同源策略的影响，手动创建一个script标签，传递URL， 同时传入一个回调函数的名字
服务器得到名字后， 返回数据时会用这个函数名来包裹数据， 客户端获取到数据之后， 立即吧script标签删掉
cors：跨域资源共享
使用自定义的HTTP头部允许浏览器和服务器相互通信
如果是简单请求,直接设置允许访问的域名：
允许你的域名来获取我的数据
response[‘Access-Control-Allow-Origin‘] = “*”
如果是复杂请求,首先会发送options请求做预检,然后再发送真正的PUT/POST….请求
因此如果复杂请求是PUT等请求,则服务端需要设置允许某请求
如果复杂请求设置了请求头，则服务端需要设置允许某请求头
简单请求：
一次请求
非简单请求：
两次请求，在发送数据之前会先发一次请求用于做“预检”，
只有“预检”通过后才再发送一次请求用于数据传输。
只要同时满足以下两大条件，就属于简单请求。
(1) 请求方法是以下三种方法之一：HEAD GET POST
(2)HTTP的头信息不超出以下几种字段：
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Accept
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Language
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Language
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Last-Event-ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、 text/plain
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>JSONP和CORS：&lt;/p>
&lt;pre>&lt;code>1.JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求
2.jsonp需要client和server端的相互配合
3.cors在client端无需设置，server端需要针对不同的请求，来做head头的处理&lt;/code>&lt;/pre></description></item><item><title>什么是RPC</title><link>https://sunnnner.github.io/%E4%BB%80%E4%B9%88%E6%98%AFrpc/</link><pubDate>Sat, 07 Sep 2019 11:36:55 +0800</pubDate><guid>https://sunnnner.github.io/%E4%BB%80%E4%B9%88%E6%98%AFrpc/</guid><description>&lt;p>RPC&lt;/p>
&lt;pre>&lt;code>远程过程中调用(RPC) 是一种协议， 程序可使用这种协议向网络中的另一台计算机上的程序请求服务
RPC采用客户机/ 服务器模式， 请求程序就是一个客户机， 而服务提供程序就是一个服务器
first 客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息
second 在服务端， 进程保持睡眠状态知道调用信息到达为止， 当一个调用到达， 服务器或得晋城参数， 结果， 发送答复信息， 然后等待下一个调用信息
next 客户端调用进程接受答复信息， 或得进程结果， 然后调用执行继续进行
&lt;/code>&lt;/pre>
&lt;p>为什么要使用API&lt;/p>
&lt;pre>&lt;code>系统之间为了调用数据
数据的传输格式：json, xml
&lt;/code>&lt;/pre></description></item><item><title>什么是RPC</title><link>https://sunnnner.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AFrpc/</link><pubDate>Sat, 07 Sep 2019 11:36:55 +0800</pubDate><guid>https://sunnnner.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AFrpc/</guid><description>&lt;p>RPC&lt;/p>
&lt;pre>&lt;code>远程过程中调用(RPC) 是一种协议， 程序可使用这种协议向网络中的另一台计算机上的程序请求服务
RPC采用客户机/ 服务器模式， 请求程序就是一个客户机， 而服务提供程序就是一个服务器
first 客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息
second 在服务端， 进程保持睡眠状态知道调用信息到达为止， 当一个调用到达， 服务器或得晋城参数， 结果， 发送答复信息， 然后等待下一个调用信息
next 客户端调用进程接受答复信息， 或得进程结果， 然后调用执行继续进行
&lt;/code>&lt;/pre>
&lt;p>为什么要使用API&lt;/p>
&lt;pre>&lt;code>系统之间为了调用数据
数据的传输格式：json, xml
&lt;/code>&lt;/pre></description></item></channel></rss>